// to check the memory 

# list containing numbers
List = [1, 2, 3, 4, 5, 6]

# printing the address of the List itself
print(f"Address of the List object : {id(List)}")

# printing the address of each Python int object
for i in List:
    print(f"{i} : {id(i)}")

import numpy as np

# create a 1D numpy array
Array = np.array(List, dtype=np.int32)

print(f"\nAddress of the NumPy Array object : {id(Array)}")

# printing the C memory addresses of each element
print("Element values with their memory addresses:")
for i in range(Array.size):
    addr = Array.ctypes.data + i * Array.itemsize
    print(f"{Array[i]} : {addr}")

// to compare the speed...

import numpy as np
import time

# Create large list and array
list1 = list(range(1_000_000))
array1 = np.array(list1)

# List operation: multiply each element by 2 using loop
start = time.time()
list_result = [x * 2 for x in list1]
end = time.time()
print(f"List operation time:{(end - start):.3f}seconds")

# Array operation: multiply by 2 (vectorized)
start = time.time()
array_result = array1 * 2
end = time.time()
print(f"Array operation time:{(end - start):.3f}seconds")
